# Do not change!
js7.component.name = "JS7 Controller"

js7.controller {
  # The ControllerId (may be overriden by command line argument)
  id = Controller

  agent-driver {
    # Duration the Controller collects and buffers events for efficient handling of multiple events
    # Ticks, so avoid tiny delays!
    event-buffer-delay = 100ms

    # Limit the number of event the Controller buffers.
    # OrderStdWritten may be up to 10000 characters (30000 UTF-8 characters),
    # so for 1000 events, memory usage can reach 30MB.
    # (1 for AgentEventsObserved is added to the number)
    event-buffer-size = 999

    # Limit number of commands per HTTP POST
    # A command may contain a complete order including its variables
    command-batch-size = 100

    # Delay first command to have an opportunity to collect more commands in a single HTTP POST
    command-batch-delay = 50ms

    # After a sending a command batch failed, delay further commands
    # The controller sends a command batch repeatedly until the Agent accepts it.
    command-error-delay = 5s

    # Maximum number of parallel HTTP requests for sending command batches to the Agent
    # Do not change!
    command-parallelism = 1

    # How often a ReleaseEvents command is sent to the Agent to delete obsolete journal files
    release-events-period = 1 minute
  }
}

js7.order {
  // Delay OrderDeleted after a IsTerminated event or recovery
  delete-delay = 0s
}

js7.journal {
  log {
    # Event classes to log at info level
    info-events += "ControllerEvent"
    info-events += "UnsignedSimpleItemAdded"
    info-events += "UnsignedSimpleItemChanged"
    info-events += "SignedItemAdded"
    info-events += "SignedItemChanged"
    info-events += "SubagentCouplingFailed"
    info-events += "VersionedEvent"
    info-events += "ItemDeletionMarked"
    info-events += "ItemDeleted"
    info-events += "AgentDedicated"
    info-events += "AgentReady"
    info-events += "AgentCoupled"
    info-events += "AgentCouplingFailed"
    info-events += "AgentShutDown"
    info-events += "AgentResetStarted"
    info-events += "AgentReset"
  }
}

js7.log.file = ${js7.data-directory}"/logs/controller.log"

js7.web.server {
  auth.realm = "JS7 JobScheduler Controller"
  test = off

  # Limit for a POST /api/command entity
  # Like pekko.http.server.parsing.max-content-length = 8m only for this web service
  services.command-size-limit = 8m
}

# Delay deletion of obsolete journal files
# to allow clients not registered in users-allowed-to-release-events
# to read the tail of the journal.
# Should be longer than js7.proxy.torn-older
js7.journal.release-events-delay = 60s

pekko {
  # This configuration is for Pekko.
  # Descriptions are borrowed from https://doc.akka.io/docs/akka/2.5.13/general/configuration.html#configuration

  log-dead-letters = off

  # We have our own shutdown hook
  coordinated-shutdown.run-by-jvm-shutdown-hook = off

  # The guardian "/user" will use this class to obtain its supervisorStrategy.
  # It needs to be a subclass of org.apache.pekko.actor.SupervisorStrategyConfigurator.
  # In addition to the default there is org.apache.pekko.actor.StoppingSupervisorStrategy.
  actor.guardian-supervisor-strategy = org.apache.pekko.actor.StoppingSupervisorStrategy

  http {
    client {
      # The time period within which the TCP connecting process must be completed.
      # Default: connecting-timeout = 10s
      connecting-timeout = 10s

      user-agent-header = "JS7 Controller "${js7.longVersion}
    }
  }
}

#!/usr/bin/env bash
set -e

export JOBSCHEDULER_HOME="$(cd "$(dirname -- "$0")/../bin/.." && pwd || kill $$)"
. "$JOBSCHEDULER_HOME/bin/internal/set-context.sh"
declare classpathString java

terminateCommand="{ TYPE: Terminate, sigtermProcesses: false }"
javaOptions=()
agentOptions=()
httpPort=4445
config=/var/opt/jobscheduler/agent/config
data=/var/opt/jobscheduler/agent/data

log4Async=false

for arg in "$@"; do
  case "$arg" in
    -rmx-port=*)
      a="${arg#*=}"
      javaOptions+=(
        "-Dcom.sun.management.jmxremote"
        "-Dcom.sun.management.jmxremote.ssl=false"
        "-Dcom.sun.management.jmxremote.authenticate=false"
        "-Dcom.sun.management.jmxremote.port=$a")
      shift
      ;;
    -debug-port=*)
      a="${arg#*=}"
      javaOptions+=("-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$a")
      shift
      ;;
    -java-option=*)
      a="${arg#*=}"
      javaOptions+=("$a")
      shift
      ;;
    -J*)
      a="${arg#-J}"
      javaOptions+=("$a")
      shift
      ;;
    -directory=*)
      config="${arg#*=}"/config
      data="${arg#*=}"/data
      shift
      ;;
    -config-directory=*)
      config="${arg#*=}"
      shift
      ;;
    -data-directory=*)
      data="${arg#*=}"
      shift
      ;;
    -http-port=*)
      httpPort="${arg#*=}"
      shift
      ;;
    -log4j-async)
      log4Async=true
      shift
      ;;
    *)
      agentOptions+=("$arg")
      shift
      ;;
  esac
done

if [ ! -d "$config" ]; then :
  echo "No such directory: -config-directory=$config"
  exit 1
fi

if [ ! -d "$data" ]; then :
  echo "No such directory: -data-directory=$data"
  exit 1
fi

logs="$data/logs"
[ -d "$logs" ] || mkdir "$logs"
echo Time is $(date --iso-8601=ns) >$logs/stdouterr.log
exec > >(tee -a "$logs"/stdouterr.log) 2>&1  # Redirects stderr to stdout as a side effect
export SCHEDULER_LOGS="$logs"  # Used in logging configuration
if [ -f "$config/log4j2.xml" ]; then :
  javaOptions+=("-Dlog4j.configurationFile=$config/log4j2.xml")
fi
if $log4Async; then :
  javaOptions+=("-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector")
  javaOptions+=("-Djobscheduler.log4j.immediateFlush=false")
fi

agentOptions+=("-config-directory=$(toSystemPath "$config" || kill $$)")
agentOptions+=("-data-directory=$(toSystemPath "$data" || kill $$)")
[ -z "$httpPort" ] || agentOptions+=("-http-port=$httpPort")

crashKillScript=$([ -n "$data" ] && echo "$data/kill_tasks_after_crash.sh")
echo "crashKillScript=$crashKillScript"
[ -z "$crashKillScript" ] || rm -f "$crashKillScript"

execute=(
  "$java" \
  "${javaOptions[@]}" \
  -classpath "$classpathString" \
  com.sos.jobscheduler.agent.main.AgentMain "${agentOptions[@]}"
)
echo "${execute[@]}"
"${execute[@]}" &
pid=$!
echo PID $pid

function terminate() {
  # Add some seconds to start Java with AgentClientMain
  terminateTimeout=30
  "$java" -Xmx50m \
    -Dlog4j.configurationFile=com/sos/jobscheduler/agent/client/main/log4j2.xml \
    -classpath "$classpathString" \
    com.sos.jobscheduler.agent.client.main.AgentClientMain \
    http://127.0.0.1:$httpPort \
    "$terminateCommand" >/dev/null &
  (sleep $terminateTimeout && kill $pid) &
  killer=$!
  wait $pid
  kill $killer
}

trap "terminate" SIGTERM SIGINT SIGHUP
wait $pid
trap - SIGTERM SIGINT SIGHUP

returnCode=$?
if [ -n "$crashKillScript" -a -s "$crashKillScript" ]; then :
  ps fux || true
  echo Executing crash kill script $crashKillScript:
  cat $crashKillScript
  (. "$crashKillScript" || true)
  ps fux || true
fi
exit $returnCode

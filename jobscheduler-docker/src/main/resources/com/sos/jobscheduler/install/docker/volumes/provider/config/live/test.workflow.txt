define workflow {
  job TEST1, arguments={"hello": "გამარჯობა!"};

  // Fork with part of a branch running at another Agent
  // Each branch starts with a string which is appended to the child Orders.
  fork(
    "🥕" {
      job TEST1, arguments={"hello": "Здравей!"};
      job TEST1, arguments={"hello": "გამარჯობა!"};
    },
    "🍋" {
      try execute executable="/fail", agent="agent-1", taskLimit=10, arguments={"hello": "やあ"};
      catch
        if (catchCount < 3) {
          job SLEEP, arguments={"hello": "WILL TRY AGAIN"};
          retry;
        } else
          job SLEEP, arguments={"hello": "LAST JOB FAILED"};
    });

  job TEST1, arguments={"hello": "مرحبًا"};
  job TEST2;

  // Fork with all jobs at same (current) Agent
  fork(
    "🥕" {
      execute executable="/test", agent="agent-1", taskLimit=10, arguments={"hello": "你好"};
      job TEST1;
    },
    "🍋" {
      job TEST1;
      job TEST1;
    });

  // Fork with one branch at current Agent, the other branch at the other Agent.
  fork(
    "🥕" {
      job TEST1;
      job TEST1;
    },
    "🍋" {
      job TEST2;
      job TEST2;
    });

  if (returnCode == 0 || returnCode == 1) {
    job TEST1;
  } else {
    job TEST2;
  };

  define job TEST1 {
    execute executable="/test", agent="agent-1", taskLimit=30, arguments={"hello": "Hello"};
  }

  define job TEST2 {
    execute executable="/test", agent="agent-2", taskLimit=10,
      arguments={
        "testArgument": "☘",
        "other": "other value"
      };
  }

  define job SLEEP {
    execute executable="/sleep", agent="agent-1", taskLimit=10;
  }
}

# Standards for all JS7 engine components

js7.configuration {
  # ("configuration" was a previous name for the Inventory items.)
  # Each used item signature implementation has an entry here
  # with the file containing the trusted public keys.
  # PGP = ${js7.config-directory}"/private/trusted-pgp-keys"
  trusted-signature-keys {}

  # Suppress check of certificates' notBefore and notAfter.
  # if yes/on/true, the Engine allows expired signature certificates.
  # See also https://change.sos-berlin.com/browse/JS-2219
  # Despite JS-2219, the recommended setting would be no/off/false.
  allow-expired-certificates = yes
}

js7.auth.users {
  # Place your own users in file secret private/private.conf, using the following pattern:
  #  NAME = "sha256:PASSWORD" or "plain:PASSWORD"
}

js7.auth.session {
  timeout = 1 hour
}

js7.web {
  chunk-size = 8MiB
}

js7.web.https {
  #  The PKCS #12 encoded keystore (.p12 file extension) contains the node's TLS certificate
  #  and its private key.
  #  keystore {
  #    store-password = "..."
  #    key-password = "..."
  #  }
  #
  #  The PEM or PKCS #12 encoded truststores contain the peer's certificates this node trusts.
  #  PKCS #12 requires a password (default is the empty password).
  #  truststores = [
  #    {
  #      file = "${common.configDirectory}/private/..."
  #      store-password = "..."
  #    }
  #  ]
}

js7.web.client {
  compression = off

  # Prefetch up to so many HTTP chunks if stream is under backpressure.
  # (worst case assumption: 8MB Workflow, 400MB heap)
  prefetch = 50

  # To let the HTTP request #look busy, an idle stream should periodically
  # transfer some keep-alive data.
  # Short keep-alive, because a Pekko HTTP stream can only be closed when
  # a stream message arrives.
  # We want to keep the response time short.
  keep-alive = 1s

  # Maximum duration of a polling HTTP GET without traffic (including keep-alive)
  #idle-get-timeout = 5s FIXME Under heavy load, timeout may occur, resulting in event loss due to improper handling in DirectorDriver(?)
  idle-get-timeout = 30s

  # Minimum duration between two polling HTTP GETs in a loop
  # (to prevent the loop running hot in case of an error)
  polling-delay = 1s

  # Increasing delays when trying to access an unreachable server
  failure-delays = [ 1s, 3s, 6s, 10s ]
}

js7.web.server {
  # When returning HTTP status 500 "Internal Server Error"
  # respond with the full Throwable message including causing Throwables.
  # May exhibit internals.
  verbose-error-messages = on

  # Web server termination may block, maybe due to connections the clients do not close
  shutdown-timeout = 3s

  # Delay between HTTP unbind and termination to allow streaming connections to close, despite
  # shutdown-timeout (which does not work as expected).
  shutdown-delay = 500ms

  # Delay ControllerOrderKeeper after ShutDown command to avoid connection reset for client
  delay-shutdown = 500ms

  # Prefetch up to so many (JSON) records if HTTP server stream is under backpressure.
  # (worst case assumption: 8MB Workflow, 400MB heap)
  prefetch = 50

  auth {
    # Realm for HTTP authentication
    realm = "JS7 JobScheduler"

    # Delay after rejected authentication
    invalid-authentication-delay = 1s

    # A client using HTTPS must provide its certificate (mutual TLS)
    # for authentication via the principal's distinguished name.
    https-client-authentication = on

    # Warning: loopback-is-public = on would open JS7
    # for everyone with access to a loopback interface (127.0.0.1)
    # This may be your local reverse proxy which routes requests
    # from the world to JS7.
    loopback-is-public = off

    # Warning: get-is-public = on would allow everyone doing HTTP GET.
    # That means read access would be allowed for everyone.
    get-is-public = off

    # Warning: public = on would allow everyone doing nearly everything with JS7.
    # Do not do that!
    public = off
  }

  log {
    level = Debug
    error-level = Debug
    500-level = Warn
    request = off
    response = on
  }

  services {
    # Limit incoming streaming POST (for now, controller/api/order)
    # A factor of the maximum heap size (Runtime.freeMemory).
    # May be coded as a number (0.4) or as percentage (40%)
    streaming-post-size-limit-factor = 40%

    event {
      streaming {
        # A short delay allows to collect more events in a chunk
        # (not effective, as events are not chunked yet)
        delay = 0ms

        # Maximum timeout after each chunk to allow to garbage collect when
        # client has canceled the request, because Akka-http does not notify about this (?)
        # When null then only the timeout requested by the client is used
        timeout = null
      }
    }

    log {
      poll-interval = 100ms
    }
  }
}

js7.journal.cluster.watch {
  # Delay after consecutive errors
  retry-delays = [1s, 3s, 6s, 10s]

  # How many ClusterWatchRunId to remember to check against non-unique ClusterWatchId usage
  uniqueness-memory-size = 1000

  restart-after-failure-delays = [10s, 20s, 30s, 60s]
}

js7.directory-watch {
  # Short delay before poll to get more file events per poll and reduce CPU usage
  watch-delay = 100ms

  # After no activity in the watched directory, the watch is registered again.
  # This allows the detection of an exchanged directory.
  # After each timeout, the whole directory is scanned.
  poll-timeout = 60s

  # Delay after consecutive errors
  retry-delays = [ 1s, 3s, 6s, 10s, 10s, 30s, 60s ]

  # Notify only when the last change of directory was before this duration.
  directory-silence = 1s

  # FileWatch.delay is added to the first delay in list.
  # Real delays may differ.
  log-delays = [ 0s, 10s ]
}

js7.thread-pools {
  // Number or fraction of CPU threads to be used for computation.
  // If a fraction like 1/4 is given, the resulting number is rounded up.
  // The result should not be more than the number of available CPU threads.
  // See also:
  //    -XX:ActiveProcessorCount https://docs.oracle.com/en/java/javase/21/docs/specs/man/java.html#advanced-runtime-options-for-java
  //    availableProcessors: https://docs.oracle.com/en%2Fjava%2Fjavase%2F21%2Fdocs%2Fapi%2F%2F/java.base/java/lang/Runtime.html#availableProcessors()
  compute.threads = 1/1
}

js7.journal {
  log {
    ack-warn-durations = [ 3s, 7s, 10s ]

    # Event classes to log at info level
    info-events = []
    info-events += "SnapshotTaken"
    info-events += "ClusterEvent"
    info-events += "ExternalOrderRejected"
    info-events += "OrderAdded"
    info-events += "OrderCycleStarted"
    info-events += "OrderCycleFinished"
    info-events += "OrderRetrying"
    info-events += "OrderFinished"
    info-events += "OrderFailed"
    info-events += "OrderDeleted"
    info-events += "OrderCancellationMarked"
    info-events += "OrderCancelled"
    info-events += "OrderSuspended"
    info-events += "OrderResumed"
    info-events += "OrderOutcomeAdded"
    info-events += "OrderBroken"
    info-events += "SubagentShutdown"
  }

  # For every committed record written to journal, sync data with disk, i.e. force write to disk. Safe but maybe slow.
  sync = off

  # For testing of timing behavior of a slow magnetic disk: Don't sync, but sleep
  #simulate-sync = 20ms

  # Delay before sync only, for more commits per sync and to reduce disk usage
  sync-delay = 50ms

  # Delay sync or flush, for more commits per sync/flush
  delay = 0ms

  # Limit the number of concurrently executed persist operations.
  # A OrderStdoutWritten is one persist and may be up to 8192 characters (~24kB UTF-8),
  # so for 1000 events, memory usage can reach 24MB.
  # Each persist is an EventCalc that resolves to an EventColl consisting of events and aggregate.
  # Due to concurrency of the Committer pipeline, the real number of EventColls is higher:
  #   2× when commitLater (OrderStdoutEvent)
  #   4× for other events
  # --> See also event-buffer-size for Director and Controller
  concurrent-persist-limit = 512

  # Additional slow consistency test:
  slow-check-state = false
  slow-check-state = ${js7.test}

  # Duration of event writing after which JS7 writes a new journal file
  snapshot.period = 1hour

  # Approximate maximum journal file size
  snapshot.when-bigger-than = 1GB

  # Estimate snapshot size again after so many events have been written
  snapshot.estimate-event-threshold = 1000

  snapshot.log-period = 30s
  snapshot.log-actor-limit = 10

  watch.keep-open = 100
  watch.index-size = 10000

  # JournalIndex holds one position for index-factor * (historic events or current commits of events)
  watch.index-factor = 100

  # Log a warning when passive cluster node does not send an acknowledgement.

  # JournalingActors logs a warning when waiting a long time for JournalActor response (persist).
  # May happen when doing a big transaction, writing a snapshot or
  # when waiting for passive cluster node acknowledgement.
  persist-warn-durations = [ 10s ]

  #dispatcher {
  #  # Pekko dispatcher. JournalActor runs in a dedicated (pinned) thread
  #  type = PinnedDispatcher
  #  executor = "thread-pool-executor"
  #}

  # ReleaseEvents command deletes unused journal files. This can be suppressed.
  remove-obsolete-files = true

  # UserIDs of user allowed to send ControllerCommand.ReleaseEvents.
  # JS7 keeps track of latest ReleaseEvents command of each user and
  # deletes obsolete events (journal files).
  users-allowed-to-release-events = []

  # Delay deletion of obsolete journal files
  # to allow clients not registered in users-allowed-to-release-events
  # to read the tail of the journal.
  # controller.conf sets a different default value
  release-events-delay = 0s
}

js7.journal.cluster {
  node.is-backup = no

  heartbeat = 3s

  # The setting pekko.http.client.connecting-timeout delays the failover if longer than this setting.
  heartbeat-timeout = 10s

  keep-truncated-rest = no

  retry-delays = [ 1s, 1s, 1s, 1s, 1s, 2s, 3s, 5s ]

  # For testing only
  suppress-failover = no
}

js7.time {
  clock-setting-check-interval = 10s
}

# Trace log some internal metering
js7.metering.log-every = 1 minute

js7.pekko {
  use-js7-thread-pool = on
  shutdown-timeout = 1s
  ask-timeout = 1 hour
  actor-message-log-level = None
  http.connection-pool-shutdown-timeout = 100ms
}

pekko {
  # This configuration is for Pekko.
  # Descriptions are borrowed from https://doc.akka.io/docs/akka/2.5.13/general/configuration.html#configuration

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  # stdout-loglevel = "DEBUG"
  stdout-loglevel = "ERROR"

  loggers = ["org.apache.pekko.event.slf4j.Slf4jLogger"]
  loglevel = WARNING
  logging-filter = "org.apache.pekko.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s

  scheduler.tick-duration = 200ms   # Or 100ms - With default (10ms under Windows), we have 1% CPU usage when idling

  # Reduce thread count and reuse JS7's thread pool
  actor.internal-dispatcher = pekko.actor.default-dispatcher

  actor.default-dispatcher.fork-join-executor {
    parallelism-min = 1
    parallelism-factor = 1
  }

  http {
    parsing.max-uri-length = 8000   # As recommended in https://tools.ietf.org/html/rfc7230#section-3.1.1

    parsing.max-chunk-size = ${js7.web.chunk-size}

    # Enables/disables inclusion of an Tls-Session-Info header in parsed
    # messages over Tls transports (i.e., HttpRequest on server side and
    # HttpResponse on client side).
    # parsing.tls-session-info-header = off
    parsing.tls-session-info-header = on

    # The maximum number of bytes per ByteString a decoding directive will produce
    # for an entity data stream.
    # decode-max-bytes-per-chunk = 1m
    routing.decode-max-bytes-per-chunk = ${js7.web.chunk-size}

    client {
      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle timeouts.
      # Default: idle-timeout = 60 s
      # JS7: Should be short enough to release canceled orphaned connections timely.
      # And should be long enough to allow long requests, even in case of
      # - big requests (like adding orders or items)
      # - writing a big snapshot
      # - cluster node delay (see cluster heartbeat)
      #idle-timeout = 60s

      user-agent-header = "JS7 "${js7.prettyVersion}
    }

    server {
      # The time period within which the TCP binding process must be completed.
      # Default: bind-timeout = 1s

      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle connection timeouts.
      # Default: idle-timeout = 60 s
      # request-timeout should be shorter
      idle-timeout = 17m

      # Defines the default time period within which the application has to
      # produce an HttpResponse for any given HttpRequest it received.
      # The timeout begins to run when the *end* of the request has been
      # received, so even potentially long uploads can have a short timeout.
      # Set to `infinite` to completely disable request timeout checking.
      #
      # Make sure this timeout is smaller than the idle-timeout, otherwise,
      # the idle-timeout will kick in first and reset the TCP connection
      # without a response.
      #
      # If this setting is not `infinite` the HTTP server layer attaches a
      # `Timeout-Access` header to the request, which enables programmatic
      # customization of the timeout period and timeout response for each
      # request individually.
      # Default: request-timeout = 20 s
      request-timeout = 16m

      # Enables/disables the returning of more detailed error messages to
      # the client in the error response.
      # Should be disabled for browser-facing APIs due to the risk of XSS attacks
      # and (probably) enabled for internal or non-browser APIs.
      # Note that pekko-http will always produce log messages containing the full
      # error details.
      # Default: verbose-error-messages = off
      verbose-error-messages = on

      # Enables/disables inclusion of an Tls-Session-Info header in parsed
      # messages over Tls transports (i.e., HttpRequest).
      # parsing.tls-session-info-header = off
      # Does not work with Akka 2.6.6, but see above akka.http.parsing.tls-session-info-header
      # parsing.tls-session-info-header = on

      # Default maximum content length which should not be exceeded by incoming request entities.
      # Can be changed at runtime (to a higher or lower value) via the `HttpEntity::withSizeLimit` method.
      # Note that it is not necessarily a problem to set this to a high value as all stream operations
      # are always properly backpressured.
      # Nevertheless you might want to apply some limit in order to prevent a single client from consuming
      # an excessive amount of server resources.
      #
      # Set to `infinite` to completely disable entity length checks. (Even then you can still apply one
      # programmatically via `withSizeLimit`.)
      # Default: parsing.max-content-length = 1m
      #
      # To change the JS7 Controller command web service entity size limit, use
      # js7.web.server.services.command-size-limit.

      # Enables/disables the addition of a remote-address attribute in HttpRequest
      # holding the clients (remote) IP address. This is preferred over `remote-address-header`
      # because it cannot be confused with a real header.
      # Default: remote-address-attribute = off
      remote-address-attribute = on

      # The default value of the `Server` header to produce if no
      # explicit `Server`-header was included in a response.
      # If this value is the empty string and no header was included in
      # the request, no `Server` header will be rendered at all.
      #server-header = pekko-http/${pekko.http.version}
      # Don't publish details of our server:
      server-header = ""
    }

    host-connection-pool {
      # The maximum number of parallel connections that a connection pool to a
      # single host endpoint is allowed to establish. Must be greater than zero.
      # Default: max-connections = 4
      # Allow more because canceled requests are still alive until some timeout kicks in.
      # (timeouts should be short)
      # When too low, requests may block
      max-connections = 10

      # The time after which an idle connection pool (without pending requests)
      # will automatically terminate itself. Set to `infinite` to completely disable idle timeouts.
      # Default: idle-timeout = 30 s

      # The minimum duration to backoff new connection attempts after the previous connection attempt failed.
      # Default: base-connection-backoff = 100ms
      # Unavoidable warning: pekko.http.impl.engine.client.PoolGateway - Connection attempt failed. Backing off new connection attempts for at least ...
      base-connection-backoff = 1s

      # Maximum backoff duration between failed connection attempts. For more information see the above comment for the
      # `base-connection-backoff` setting.
      # Default: max-connection-backoff = 2 min
      max-connection-backoff = 1s

      # The maximum number of times failed requests are attempted again,
      # (if the request can be safely retried) before giving up and returning an error.
      # Set to zero to completely disable request retries.
      # Default: max-retries = 5
      max-retries = 0

      # The "new" pool implementation will fail a connection early and clear the slot if a response entity was not
      # subscribed during the given time period after the response was dispatched. In busy systems the timeout might be
      # too tight if a response is not picked up quick enough after it was dispatched by the pool.
      # Default: response-entity-subscription-timeout = 1s
      response-entity-subscription-timeout = 10s

      # HTTP connections are commonly used for multiple requests, that is, they are kept alive between requests. The
      # `pekko.http.host-connection-pool.keep-alive-timeout` setting configures how long a pool keeps a connection alive between
      # requests before it closes the connection (and eventually reestablishes it).
      #
      # A common scenario where this setting is useful is to prevent a race-condition inherent in HTTP: in most cases, a server
      # or reverse-proxy closes a persistent (kept-alive) connection after some time. HTTP does not define a protocol between
      # client and server to negotiate a graceful teardown of an idle persistent connection. Therefore, it can happen that a server decides to
      # close a connection at the same time that a client decides to send a new request. In that case, the request will fail to be processed,
      # but the client cannot determine for which reason the server closed the connection and whether the request was (partly) processed or not.
      # Such a condition can be observed when a request fails with an `UnexpectedConnectionClosureException` or a `StreamTcpException` stating
      # "Connection reset by peer".
      #
      # To prevent this from happening, you can set the timeout to a lower value than the server-side keep-alive timeout
      # (which you either have to know or find out experimentally).
      #
      # Set to `infinite` to allow the connection to remain open indefinitely (or be closed by the more general `idle-timeout`).
      # Default: keep-alive-timeout = infinite
      keep-alive-timeout = 30s  # = pekko.http.client.idle-timeout
    }
  }
}

#!/usr/bin/env bash
set -euo pipefail
# -----------------------------------------------------------------------------
# Prepare your local git directory yourself like this:
#   git checkout release/2.0
#   git pull --ff-only
# -----------------------------------------------------------------------------

#cd "${0%/*}/../js7-controller/.."
# Must be a js7 directory
cd js7-controller/..

if [ ${BASH_VERSINFO[0]} -lt 5 ]; then
  # Before 4.4, bash does handle empty arrays with -u
  set +u
fi

asVersion=""
nextSnapshot=""
pushOptions=()

function usage() {
  echo "Usage: $0 --merge=<version> --as=<version> --next-snapshot=<version>"
  echo "--as and --next-snapshot are used together to name the released version"
  echo "--as names the released version"
  echo "--next-snapshot names the following snapshot version"
  echo "Example: $0 --as=2.0.0 --next-snapshot=2.0.0-SNAPSHOT"
}

for arg in "$@"; do :
  case "$arg" in
    --as=*)
      asVersion="${arg#*=}"
      ;;
    --next-snapshot=*)
      nextSnapshot="${arg#*=}"
      ;;
    --no-push)
      pushOptions+=("--dry-run")
      ;;
    -\?|-h|--help)
      usage
      exit 0
      ;;
    *)
      echo "Invalid option: $arg"
      usage
      exit 1
      ;;
  esac
done
if [ -z "$asVersion" ] && [ -n "$nextSnapshot" ]; then
  echo "Please set --as=<version> with --next-snapshot=<version>"
  usage
  exit 1
fi

# We skip-tests because the commit asVersion be released should already have been tested.
# Don't forget asVersion build and test the release !
./sbt-batch \
  -Djs7.asVersion="$asVersion" \
  -Djs7.nextSnapshot="$nextSnapshot" \
  'release with-defaults skip-tests'

git push "${pushOptions[@]}" --follow-tags

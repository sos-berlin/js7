akka {
  # This configuration is for Akka. Descriptions are borrowed from http://akka.io.

  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  log-dead-letters = 0
  scheduler.tick-duration = 1s   # Or 100ms - With default (10ms under Windows), we have 1% CPU usage when idling
  jvm-exit-on-fatal-error = false

  # The guardian "/user" will use this class to obtain its supervisorStrategy.
  # It needs to be a subclass of akka.actor.SupervisorStrategyConfigurator.
  # In addition to the default there is akka.actor.StoppingSupervisorStrategy.
  actor.guardian-supervisor-strategy = akka.actor.StoppingSupervisorStrategy
}

akka.http {
  # This configuration is for the Akka HTTP web server and client.
  # Descriptions are borrowed from http://doc.akka.io/docs/akka-http/current/scala/http/configuration.html.

  host-connection-pool {
    # The maximum number of times failed requests are attempted again,
    # (if the request can be safely retried) before giving up and returning an error.
    # Set to zero to completely disable request retries.
    max-retries = 0

    # The maximum number of open requests accepted into the pool across all
    # materializations of any of its client flows.
    # Protects against (accidentally) overloading a single pool with too many client flow materializations.
    # Note that with N concurrent materializations the max number of open request in the pool
    # will never exceed N * max-connections * pipelining-limit.
    # Must be a power of 2 and > 0!
    #max-open-requests = 32

    # The time after which an idle connection pool (without pending requests)
    # will automatically terminate itself. Set to `infinite` to completely disable idle timeouts.
    idle-timeout = 65s
  }

  client {
    # The time period within which the TCP connecting process must be completed.
    connecting-timeout = 30s
  }
}

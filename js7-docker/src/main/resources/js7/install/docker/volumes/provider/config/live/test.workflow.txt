define workflow {
  job TEST1, arguments={"hello": "გამარჯობა!"};

  fork {
    "🥕": {
      job TEST1, arguments={"hello": "Здравей!"};
      job TEST1, arguments={"hello": "გამარჯობა!"};
      job TEST1, arguments={"hello": "مرحبًا"};
      job TEST1, arguments={"hello": "やあ!"};
    },
    "🍋": {
      try (retryDelays=[0, 1]) {
        execute agent="agent-1", taskLimit=10, arguments={"hello": "やあ"}, executable="fail";
      } catch {
        if (catchCount < 5) {
          job SLEEP, arguments={"hello": "Will try again ⭕️"};
          retry;
        } else
          job SLEEP, arguments={"hello": "LAST JOB FAILED"};
      }
    }
  }

  job TEST2;

  // Fork with all jobs at same (current) Agent
  fork {
    "🥕": {
      execute agent="agent-1", taskLimit=10, arguments={"hello": "你好"}, executable="test";
      job TEST1;
    },
    "🍋": {
      job TEST1;
      job TEST1;
    }
  }

  // Fork with one branch on current Agent, the other branch on the other Agent.
  fork {
    "🥕": { job TEST1; job TEST1; },
    "🍋": { job TEST2; job TEST2; }
  }

  define job TEST1 {
    execute agent="agent-1", taskLimit=50, arguments={"hello": "Hello"}, executable="test";
  }

  define job TEST2 {
    execute agent="agent-2", taskLimit=50,
      arguments={
        "testArgument": "☘️",
        "other": "other value"
      },
      script =
''#!/usr/bin/env bash
set -euo pipefail

echo "はじめまして。 $SCHEDULER_PARAM_TESTARGUMENT"
sleep 2
exit
'';
  }

  define job SLEEP {
    execute executable="sleep", agent="agent-1", taskLimit=10;
  }
}

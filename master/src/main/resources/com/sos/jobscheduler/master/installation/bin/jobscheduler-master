#!/usr/bin/env bash
set -e

# JobScheduler Master starter

export JOBSCHEDULER_HOME="$(cd "$(dirname -- "$0")/../bin/.." && pwd || kill $$)"
. "$JOBSCHEDULER_HOME/bin/internal/set-context.sh"
declare classpathString java

config=/var/opt/jobscheduler/master/config
data=/var/opt/jobscheduler/master/data
httpPort=4444
masterOptions=()
javaOptions=(-XX:+UseStringDeduplication)
log4jAsync=false

for arg in "$@"; do :
  case "$arg" in
    -rmx-port=*)
      a="${arg#*=}"
      javaOptions+=(
        "-Dcom.sun.management.jmxremote"
        "-Dcom.sun.management.jmxremote.ssl=false"
        "-Dcom.sun.management.jmxremote.authenticate=false"
        "-Dcom.sun.management.jmxremote.port=$a")
      shift
      ;;
    -debug-port=*)
      a="${arg#*=}"
      javaOptions+=("-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$a")
      shift
      ;;
    -java-option=*)
      a="${arg#*=}"
      javaOptions+=("$a")
      shift
      ;;
    -J*)
      a="${arg#-J}"
      javaOptions+=("$a")
      shift
      ;;
    -directory=*)
      config="${arg#*=}"/config
      data="${arg#*=}"/data
      shift
      ;;
    -config-directory=*)
      config="${arg#*=}"
      shift
      ;;
    -data-directory=*)
      data="${arg#*=}"
      shift
      ;;
    -http-port=*)
      httpPort="${arg#*=}"
      shift
      ;;
    -log4j-async)
      log4jAsync=true
      shift
      ;;
    *)
      masterOptions+=("$arg")
      shift
      ;;
  esac
done

if [ ! -d "$config" ]; then :
  echo "No such directory: -config-directory=$config"
  exit 1
fi

if [ ! -d "$data" ]; then :
  echo "No such directory: -data-directory=$data"
  exit 1
fi

logs="$data/logs"
[ -d "$logs" ] || mkdir "$logs"

stateDir="$data/state"
[ -d "$stateDir" ] || mkdir "$stateDir"

echo -e "\n-------\n$(date --iso-8601=ns)" >>$logs/stdouterr.log
exec > >(tee -a "$logs"/stdouterr.log) 2>&1  # Redirects stderr to stdout as a side effect
export SCHEDULER_LOGS="$logs"  # Used in logging configuration
if [ -f "$config/log4j2.xml" ]; then :
  javaOptions+=("-Dlog4j.configurationFile=$config/log4j2.xml")
fi
if $log4jAsync; then :
  javaOptions+=("-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector")
  javaOptions+=("-Dlog4j2.asyncLoggerWaitStrategy=Block")  # Uses less CPU when idling than default "Timeout"
  javaOptions+=("-Djobscheduler.log4j.immediateFlush=false")
fi

masterOptions+=("-config-directory=$(toSystemPath "$config" || kill $$)")
normalizedData="$(toSystemPath "$data" || kill $$)"
masterOptions+=("-data-directory=$normalizedData")
[ -z "$httpPort" ] || masterOptions+=("-http-port=$httpPort")

execute=(
  "$java"
  "${javaOptions[@]}"
  -classpath "$classpathString"
  com.sos.jobscheduler.master.MasterMain
  "${masterOptions[@]}")
echo "${execute[@]}"
"${execute[@]}" &

pid=$!
pidFile="$stateDir/pid"
echo "$pid" >$pidFile
echo PID $pid

function terminate() {
  echo
  echo Terminate JobScheduler Master
  # Add some seconds to start Java with MasterClientMain
  terminateTimeout=30
  if [ "$SHELL" == "/bin/bash" ]; then
    $JOBSCHEDULER_HOME/bin/jobscheduler-client -data-directory="$normalizedData" '{ "TYPE": "Terminate" }' &
  else
    "$java" -Xmx50m \
      -Dlog4j.configurationFile=com/sos/jobscheduler/master/client/main/log4j2.xml \
      -classpath "$classpathString" \
      com.sos.jobscheduler.master.client.main.MasterClientMain \
      -data-directory="$normalizedData" \
      http://127.0.0.1:$httpPort \
      "{ TYPE: Terminate }" >/dev/null &
  fi
  (sleep $terminateTimeout && kill $pid) &
  killer=$!
  wait $pid
  kill $killer
}

trap "terminate" SIGTERM SIGINT SIGHUP
wait $pid || echo "JobScheduler Master exited with exit code $?"
rm $pidFile

trap - SIGTERM SIGINT SIGHUP
echo -e "\n$(date --iso-8601=ns) JobScheduler Master has been shut down" >>$logs/stdouterr.log

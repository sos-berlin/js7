jobscheduler.master {
  id = Master

  agent-driver {
    command-batch-size = 1000
    command-batch-delay = 50ms
    event-fetch-delay = 100ms
    keep-events-period = 15 minutes
    event-fetch-timeout = 50s
    termination-logout-timeout = 1s
  }
}

jobscheduler.akka-ask-timeout = 60s

jobscheduler.auth.users {
  # Place your own users in file secret private/private.conf, using the following pattern:
  #  NAME = "sha256:PASSWORD" or "plain:PASSWORD"
}

jobscheduler.auth.session {
  timeout = 1 hour
}

jobscheduler.webserver {
  # When returning HTTP status 500 "Internal Server Error"
  # respond with the full Throwable message including causing Throwables.
  # May exhibit internals.
  verbose-error-messages = on

  auth {
    realm = "JobScheduler Master"
    invalid-authentication-delay = 1s
    loopback-is-public = false
    get-is-public = false
    public = false
  }

  log {
    level = Debug
  }

  test = off
}

jobscheduler.journal {
  # For every committed record written to journal, sync data with disk, i.e. force write to disk. Safe but maybe slow.
  sync = on

  # Experimental: delay sync for more commits/sync
  delay = 0ms

  # Duration of event writing after which a new journal file is to be written
  snapshot.period = 1hour

  snapshot.log-period = 30s
  snapshot.log-actor-limit = 10

  watch.keep-open = 100
  watch.index-size = 10000

  # EventIdPositionIndex holds one position for index-factor * (historic events or current commits of events)
  watch.index-factor = 100

  # Testing only
  #simulate-sync = 20ms
}

jobscheduler.logging {
  actor = off
}

jobscheduler.gui {
  fetch-events-with = SSE

  sse {
    # After this time without event, process the event batch
    batch-delay = 0.1s

    batch-size = 5000

    server-timeout = 24h
  }
}

akka {
  # This configuration is for Akka.
  # Descriptions are borrowed from https://doc.akka.io/docs/akka/2.5.13/general/configuration.html#configuration

  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = off
  scheduler.tick-duration = 1s   # Or 100ms - With default (10ms under Windows), we have 1% CPU usage when idling
  #akka.jvm-exit-on-fatal-error = false

  # The guardian "/user" will use this class to obtain its supervisorStrategy.
  # It needs to be a subclass of akka.actor.SupervisorStrategyConfigurator.
  # In addition to the default there is akka.actor.StoppingSupervisorStrategy.
  actor.guardian-supervisor-strategy = akka.actor.StoppingSupervisorStrategy

  http.parsing.max-uri-length = 8000   # As recommended in https://tools.ietf.org/html/rfc7230#section-3.1.1
}

akka.http {
  # This configuration is for the Akka HTTP web server and client.
  # Descriptions are borrowed from https://doc.akka.io/docs/akka-http/10.1.3/configuration.html?language=scala

  server {
    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle connection timeouts.
    idle-timeout = 65s

    # Defines the default time period within which the application has to
    # produce an HttpResponse for any given HttpRequest it received.
    # The timeout begins to run when the *end* of the request has been
    # received, so even potentially long uploads can have a short timeout.
    # Set to `infinite` to completely disable request timeout checking.
    #
    # Make sure this timeout is smaller than the idle-timeout, otherwise,
    # the idle-timeout will kick in first and reset the TCP connection
    # without a response.
    #
    # If this setting is not `infinite` the HTTP server layer attaches a
    # `Timeout-Access` header to the request, which enables programmatic
    # customization of the timeout period and timeout response for each
    # request individually.
    request-timeout = 60s

    # Enables/disables the returning of more detailed error messages to
    # the client in the error response.
    # Should be disabled for browser-facing APIs due to the risk of XSS attacks
    # and (probably) enabled for internal or non-browser APIs.
    # Note that akka-http will always produce log messages containing the full
    # error details.
    verbose-error-messages = on
  }

  host-connection-pool {
    # The maximum number of times failed requests are attempted again,
    # (if the request can be safely retried) before giving up and returning an error.
    # Set to zero to completely disable request retries.
    max-retries = 0

    # The maximum number of open requests accepted into the pool across all
    # materializations of any of its client flows.
    # Protects against (accidentally) overloading a single pool with too many client flow materializations.
    # Note that with N concurrent materializations the max number of open request in the pool
    # will never exceed N * max-connections * pipelining-limit.
    # Must be a power of 2 and > 0!
    #max-open-requests = 32
  }

  client {
    # The time period within which the TCP connecting process must be completed.
    connecting-timeout = 30s

    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle timeouts.
    idle-timeout = 60s
  }
}

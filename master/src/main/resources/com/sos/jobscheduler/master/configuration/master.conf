jobscheduler.master {
  akka-ask-timeout = 60s

  webserver {
    auth {
      realm = "JobScheduler Master"
      invalid-authentication-delay = 2s
      http-is-public = true
      get-is-public = false
    }

    csrf {
      # For a list of cross-site HTML 5 form POST content types, see https://www.w3.org/TR/html5/forms.html#attr-fs-enctype
      reject-post-content-types: [ application/x-www-form-urlencoded, multipart/form-data, text/plain ]
    }
  }

  event {
    queue-size = 10000
    timeout-limit = 1 hour
  }

  journal {
    sync = on
  }
}

jobscheduler.webserver {
  # When returning HTTP status 500 "Internal Server Error"
  # show the client the full Throwable message including causing Throwables.
  verbose-error-messages = on

  log {
    level = Debug
    elapsed-time = off
  }
}

akka {
  # This configuration is for Akka. Descriptions are borrowed from http://akka.io.

  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  log-dead-letters = off
  scheduler.tick-duration = 1s   # Or 100ms - With default (10ms under Windows), we have 1% CPU usage when idling
  #akka.jvm-exit-on-fatal-error = false

  # The guardian "/user" will use this class to obtain its supervisorStrategy.
  # It needs to be a subclass of akka.actor.SupervisorStrategyConfigurator.
  # In addition to the default there is akka.actor.StoppingSupervisorStrategy.
  actor.guardian-supervisor-strategy = akka.actor.StoppingSupervisorStrategy
}

akka.http {
  # This configuration is for the Akka HTTP web server and client.
  # Descriptions are borrowed from http://doc.akka.io/docs/akka-http/current/scala/http/configuration.html.

  server {
    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle connection timeouts.
    idle-timeout = 65s

    # Defines the default time period within which the application has to
    # produce an HttpResponse for any given HttpRequest it received.
    # The timeout begins to run when the *end* of the request has been
    # received, so even potentially long uploads can have a short timeout.
    # Set to `infinite` to completely disable request timeout checking.
    #
    # Make sure this timeout is smaller than the idle-timeout, otherwise,
    # the idle-timeout will kick in first and reset the TCP connection
    # without a response.
    #
    # If this setting is not `infinite` the HTTP server layer attaches a
    # `Timeout-Access` header to the request, which enables programmatic
    # customization of the timeout period and timeout response for each
    # request individually.
    request-timeout = 60s

    # Enables/disables the returning of more detailed error messages to
    # the client in the error response.
    # Should be disabled for browser-facing APIs due to the risk of XSS attacks
    # and (probably) enabled for internal or non-browser APIs.
    # Note that akka-http will always produce log messages containing the full
    # error details.
    verbose-error-messages = on
  }

  host-connection-pool {
    # The maximum number of times failed requests are attempted again,
    # (if the request can be safely retried) before giving up and returning an error.
    # Set to zero to completely disable request retries.
    max-retries = 0

    # The maximum number of open requests accepted into the pool across all
    # materializations of any of its client flows.
    # Protects against (accidentally) overloading a single pool with too many client flow materializations.
    # Note that with N concurrent materializations the max number of open request in the pool
    # will never exceed N * max-connections * pipelining-limit.
    # Must be a power of 2 and > 0!
    #max-open-requests = 32
  }

  client {
    # The time period within which the TCP connecting process must be completed.
    connecting-timeout = 30s

    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle timeouts.
    idle-timeout = 60s
  }
}

# Standards for all JS7 engine components

js7.configuration.trusted-signature-keys {
  # Each used object configuration signature implementation has an entry here
  # with the file containing the trusted public keys.
  # PGP = ${js7.config-directory}"/private/trusted-pgp-keys"
}

js7.auth.users {
  # Place your own users in file secret private/private.conf, using the following pattern:
  #  NAME = "sha256:PASSWORD" or "plain:PASSWORD"
}

js7.auth.session {
  timeout = 1 hour
}

js7.web.server {
  # When returning HTTP status 500 "Internal Server Error"
  # respond with the full Throwable message including causing Throwables.
  # May exhibit internals.
  verbose-error-messages = on

  shutdown-timeout = 10s

  auth {
    # Realm for HTTP authentication
    realm = "JS7 JobScheduler"

    # Delay after rejected authentication
    invalid-authentication-delay = 1s

    # A client using HTTPS must provide its certificate (mutual TLS)
    # for authentication via the principal's distinguished name.
    https-client-authentication = on

    # Warning: loopback-is-public = on would open JS7
    # for everyone with access to a loopback interface (127.0.0.1)
    # This may be your local reverse proxy which routes requests
    # from the world to JS7.
    loopback-is-public = off

    # Warning: get-is-public = on would allow everyone doing HTTP GET.
    # That means read access would be allowed for everyone.
    get-is-public = off

    # Warning: public = on would allow everyone doing nearly everything with JS7.
    # Do not do that!
    public = off
  }

  log {
    level = Debug
    error-level = Debug
    500-level = Warn
    response = on
  }

  services {
    event {
      streaming {
        chunk-timeout = 24h
        delay = 20ms
      }
    }

    log {
      poll-interval = 100ms
    }
  }
}

js7.thread-pools {
  standard {
    # Number of threads.
    # parallelism = 8 means 8 threads
    # parallelism = 1.5x means one and a half thread per processor (Java's availableProcessors), rounded up
    parallelism = 1x

    # Maximum number of threads, including blocking ones
    maximum = 1000
  }
}

js7.monix.tailrecm-limit = 1000

js7.journal {
  # For every committed record written to journal, sync data with disk, i.e. force write to disk. Safe but maybe slow.
  sync = off

  # For testing of timing behavior of a slow magnetic disk: Don't sync, but sleep
  #simulate-sync = 20ms

  # Delay before sync only, for more commits per sync and to reduce disk usage
  sync-delay = 50ms

  # Delay sync or flush, for more commits per sync/flush
  delay = 0ms

  # Limit the number of event the Controller buffers.
  # OrderStdWritten may be up to 10000 characters (30000 UTF-8 characters),
  # so for 1000 events, memory usage can reach 30MB.
  # (1 for AgentEventIdEvent is added to the number)
  event-buffer-size = 999

  # Additional slow consistency test:
  slow-check-state = false

  # To switch to the old behaviour with snapshost managed by JournaledActors: false
  use-journaled-state-as-snapshot = true

  # Duration of event writing after which JS7 writes a new journal file
  snapshot.period = 1hour

  # Approximate maximum journal file size
  snapshot.when-bigger-than = 1GB

  snapshot.log-period = 30s
  snapshot.log-actor-limit = 10

  watch.keep-open = 100
  watch.index-size = 10000

  # JournalIndex holds one position for index-factor * (historic events or current commits of events)
  watch.index-factor = 100

  ack-warn-durations = [ 5s, 5.s, 10.s ]

  dispatcher {
    # Akka dispatcher. JournalActor runs in a dedicated (pinned) thread
    type = PinnedDispatcher
    executor = "thread-pool-executor"
  }

  # ReleaseEvents command deletes unused journal files. This can be suppressed.
  remove-obsolete-files = true

  # UserIDs of user allowed to send ControllerCommand.ReleaseEvents.
  # JS7 keeps track of latest ReleaseEvents command of each user and
  # deletes obsolete events (journal files).
  users-allowed-to-release-events = []
}

js7.akka {
  use-js7-thread-pool = on
  shutdown-timeout = 10s
  ask-timeout = 1 hour
  actor-message-log-level = None
}

akka {
  # This configuration is for Akka.
  # Descriptions are borrowed from https://doc.akka.io/docs/akka/2.5.13/general/configuration.html#configuration

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  # stdout-loglevel = "DEBUG"
  stdout-loglevel = "ERROR"

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s

  scheduler.tick-duration = 200ms   # Or 100ms - With default (10ms under Windows), we have 1% CPU usage when idling

  actor.default-dispatcher.fork-join-executor {
    parallelism-min = 1
    parallelism-factor = 1
  }

  http {
    parsing.max-uri-length = 8000   # As recommended in https://tools.ietf.org/html/rfc7230#section-3.1.1

    // TODO Provide streaming for `js7.base.Big` objects
    // - ControllerCommand.Batch, UpdateRepo and ReplaceRepo
    // - AgentCommand.Batch, AttachOrder
    // - AgentCommand.CoupleController.Response(Set[OrderId])
    client.parsing.max-chunk-size = 10m
    client.parsing.max-content-length = 100m

    # Enables/disables inclusion of an Tls-Session-Info header in parsed
    # messages over Tls transports (i.e., HttpRequest on server side and
    # HttpResponse on client side).
    # parsing.tls-session-info-header = off
    parsing.tls-session-info-header = on

    server {
      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle connection timeouts.
      # Default: idle-timeout = 60 s
      # request-timeout should be shorter
      idle-timeout = 61 minutes

      # Defines the default time period within which the application has to
      # produce an HttpResponse for any given HttpRequest it received.
      # The timeout begins to run when the *end* of the request has been
      # received, so even potentially long uploads can have a short timeout.
      # Set to `infinite` to completely disable request timeout checking.
      #
      # Make sure this timeout is smaller than the idle-timeout, otherwise,
      # the idle-timeout will kick in first and reset the TCP connection
      # without a response.
      #
      # If this setting is not `infinite` the HTTP server layer attaches a
      # `Timeout-Access` header to the request, which enables programmatic
      # customization of the timeout period and timeout response for each
      # request individually.
      # Default: request-timeout = 20 s
      request-timeout = 1h

      # Enables/disables the returning of more detailed error messages to
      # the client in the error response.
      # Should be disabled for browser-facing APIs due to the risk of XSS attacks
      # and (probably) enabled for internal or non-browser APIs.
      # Note that akka-http will always produce log messages containing the full
      # error details.
      # Default: verbose-error-messages = off
      verbose-error-messages = on

      # Enables/disables inclusion of an Tls-Session-Info header in parsed
      # messages over Tls transports (i.e., HttpRequest).
      # parsing.tls-session-info-header = off
      # Does not work with Akka 2.6.6, but see above akka.http.parsing.tls-session-info-header
      # parsing.tls-session-info-header = on
    }

    host-connection-pool {
      # The time after which an idle connection pool (without pending requests)
      # will automatically terminate itself. Set to `infinite` to completely disable idle timeouts.
      # Default: idle-timeout = 30 s
      idle-timeout = infinite

      # The minimum duration to backoff new connection attempts after the previous connection attempt failed.
      # Default: base-connection-backoff = 100ms
      # Unavoidable warning: akka.http.impl.engine.client.PoolGateway - Connection attempt failed. Backing off new connection attempts for at least ...
      base-connection-backoff = 1s

      # Maximum backoff duration between failed connection attempts. For more information see the above comment for the
      # `base-connection-backoff` setting.
      # Default: max-connection-backoff = 2 min
      max-connection-backoff = 1s

      # The maximum number of times failed requests are attempted again,
      # (if the request can be safely retried) before giving up and returning an error.
      # Set to zero to completely disable request retries.
      # Default: max-retries = 5
      max-retries = 0

      # The "new" pool implementation will fail a connection early and clear the slot if a response entity was not
      # subscribed during the given time period after the response was dispatched. In busy systems the timeout might be
      # too tight if a response is not picked up quick enough after it was dispatched by the pool.
      # Default: response-entity-subscription-timeout = 1s
      response-entity-subscription-timeout = 10s
    }
  }
}
